#pragma once
#include "E:/SourceCode/VS2019/Libs_Of_Jian/phnt/phnt_windows.h"
#include "E:/SourceCode/VS2019/Libs_Of_Jian/phnt/phnt.h"
#include "E:/SourceCode/VS2019/Libs_Of_Jian/GravityEngineCfg.h"
#include "E:/SourceCode/VS2019/Libs_Of_Jian/Tool/lazy_importer.hpp"
#include <iostream>
#pragma  warning(disable:4996)

namespace MEMORYLOAD 
{
	typedef NTSTATUS(WINAPI* LdrGetProcedureAddressT)(IN PVOID DllHandle, IN PANSI_STRING ProcedureName OPTIONAL, IN ULONG ProcedureNumber OPTIONAL, OUT FARPROC* ProcedureAddress);
	typedef VOID(WINAPI* RtlFreeUnicodeStringT)(_Inout_ PUNICODE_STRING UnicodeString);
	typedef  VOID(WINAPI* RtlInitAnsiStringT)(_Out_ PANSI_STRING DestinationString, _In_opt_ PCSZ SourceString);
	typedef NTSTATUS(WINAPI* RtlAnsiStringToUnicodeStringT)(_Inout_ PUNICODE_STRING DestinationString, _In_ PCANSI_STRING SourceString, _In_ BOOLEAN AllocateDestinationString);
	typedef NTSTATUS(WINAPI* LdrLoadDllT)(PWCHAR, PULONG, PUNICODE_STRING, PHANDLE);
	typedef BOOL(APIENTRY* ProcDllMain)(LPVOID, DWORD, LPVOID);
	typedef NTSTATUS(WINAPI* NtAllocateVirtualMemoryT)(IN HANDLE ProcessHandle, IN OUT PVOID* BaseAddress, IN ULONG ZeroBits, IN OUT PSIZE_T RegionSize, IN ULONG AllocationType, IN ULONG Protect);

	typedef struct _PARAMX_
	{
		PVOID lpFileData;
		DWORD DataLength;
		LdrGetProcedureAddressT LdrGetProcedureAddress;
		NtAllocateVirtualMemoryT dwNtAllocateVirtualMemory;
		LdrLoadDllT pLdrLoadDll;
		RtlInitAnsiStringT RtlInitAnsiString;
		RtlAnsiStringToUnicodeStringT RtlAnsiStringToUnicodeString;
		RtlFreeUnicodeStringT RtlFreeUnicodeString;
	}PARAMX, * PPARAMX;

	typedef DWORD64(WINAPI *MemLoadLibrary)(PPARAMX x);

	GRAVITY_ENGINE_API bool MemoryLoadDll(IN PVOID* dllBuffer, IN ULONG* dllSize, OUT PVOID* imageBase);

	GRAVITY_ENGINE_API bool MemoryLoadDllEx(IN HANDLE hProcess, IN PVOID* dllBuffer, IN ULONG* dllSize, OUT PVOID* imageBase,bool is32bit);
	//GRAVITY_ENGINE_API bool MemoryLoadDllExAPC(IN HANDLE hProcess, IN DWORD dwTid, IN PVOID* dllBuffer, IN ULONG* dllSize, OUT ULONG_PTR* imageBase);

	/// <summary>
	/// 通过序号或者函数名找到导出函数地址
	/// </summary>
	/// <param name="hModule"></param>
	/// <param name="lpProcName"></param>
	/// <returns></returns>
	GRAVITY_ENGINE_API FARPROC WINAPI GetExportAddress(PVOID hMod, const char* lpProcName);

	//-------------------------dll load--------------------------------

	typedef BOOL(__stdcall* typedef_DllMain)(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved);

	void ShowError(const char* lpszText);

	// 模拟LoadLibrary加载内存DLL文件到进程中
	// lpData: 内存DLL文件数据的基址
	// dwSize: 内存DLL文件的内存大小
	// 返回值: 内存DLL加载到进程的加载基址
	GRAVITY_ENGINE_API LPVOID MmLoadLibrary(LPVOID lpData, DWORD dwSize);

	//不执行dllmain
	GRAVITY_ENGINE_API LPVOID MmLoadLibraryNoCallDllMain(LPVOID lpData, DWORD dwSize);

	// 释放从内存加载的DLL到进程内存的空间
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL MmFreeLibrary(LPVOID lpBaseAddress);

	// 模拟GetProcAddress获取内存DLL的导出函数
	// lpBaseAddress: 内存DLL文件加载到进程中的加载基址
	// lpszFuncName: 导出函数的名字
	// 返回值: 返回导出函数的的地址
	GRAVITY_ENGINE_API LPVOID MmGetProcAddress(LPVOID lpBaseAddress, PCCH lpszFuncName);

	// 模拟PE加载器加载内存EXE文件到进程中
	// lpData: 内存EXE文件数据的基址
	// dwSize: 内存EXE文件的内存大小
	// 返回值: 内存EXE加载到进程的加载基址
	GRAVITY_ENGINE_API LPVOID MmLoadExe(LPVOID lpData, DWORD dwSize);

	GRAVITY_ENGINE_API LPVOID MmLoadExeNoCallMain(LPVOID lpData, DWORD dwSize);


	// 判断是否有重定位表存在
	GRAVITY_ENGINE_API BOOL IsExistRelocationTable(LPVOID lpBaseAddress);


	// 根据PE结构,获取PE文件加载到内存后的镜像大小
	// lpData: 内存DLL文件数据的基址
	// 返回值: 返回PE文件结构中IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage值的大小
	GRAVITY_ENGINE_API ULONG_PTR GetSizeOfImage(LPVOID lpData);


	// 将内存DLL数据按SectionAlignment大小对齐映射到进程内存中
	// lpData: 内存DLL文件数据的基址
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL MmMapFile(LPVOID lpData, LPVOID lpBaseAddress);


	// 对齐SectionAlignment
	// dwSize: 表示未对齐前内存的大小
	// dwAlignment: 对齐大小值
	// 返回值: 返回内存对齐之后的值
	GRAVITY_ENGINE_API ULONG_PTR Align(ULONG_PTR dwSize, ULONG_PTR dwAlignment);


	// 修改PE文件重定位表信息
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL DoRelocationTable(LPVOID lpBaseAddress);


	// 填写PE文件导入表信息
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL DoImportTable(LPVOID lpBaseAddress);


	// 修改PE文件加载基址IMAGE_NT_HEADERS.OptionalHeader.ImageBase
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL SetImageBase(LPVOID lpBaseAddress);


	// 跳转到PE的入口点处执行, 函数地址即为PE文件的入口点IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint
	// lpBaseAddress: 内存PE数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL CallExeEntry(LPVOID lpBaseAddress);


	// 调用DLL的入口函数DllMain,函数地址即为PE文件的入口点IMAGE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint
	// lpBaseAddress: 内存DLL数据按SectionAlignment大小对齐映射到进程内存中的内存基址
	// 返回值: 成功返回TRUE，否则返回FALSE
	GRAVITY_ENGINE_API BOOL CallDllMain(LPVOID lpBaseAddress);





	static unsigned char MemLoadShellcode_x86[] = {
		0x55, 0x8B, 0xEC, 0x81, 0xEC, 0xB0, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x8B, 0x08, 0x89,
		0x4D, 0xD4, 0x8B, 0x55, 0x08, 0x8B, 0x42, 0x04, 0x89, 0x45, 0xC4, 0x8B, 0x4D, 0x08, 0x8B,
		0x51, 0x08, 0x89, 0x55, 0x9C, 0x8B, 0x45, 0x08, 0x8B, 0x48, 0x0C, 0x89, 0x4D, 0x8C, 0x8B,
		0x55, 0x08, 0x8B, 0x42, 0x10, 0x89, 0x85, 0x68, 0xFF, 0xFF, 0xFF, 0x8B, 0x4D, 0x08, 0x8B,
		0x51, 0x14, 0x89, 0x55, 0xA0, 0x8B, 0x45, 0x08, 0x8B, 0x48, 0x18, 0x89, 0x8D, 0x6C, 0xFF,
		0xFF, 0xFF, 0x8B, 0x55, 0x08, 0x8B, 0x42, 0x1C, 0x89, 0x85, 0x64, 0xFF, 0xFF, 0xFF, 0xC7,
		0x45, 0x98, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45,
		0xE0, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xE8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xFC,
		0x00, 0x00, 0x00, 0x00, 0x83, 0x7D, 0xC4, 0x40, 0x0F, 0x86, 0x71, 0x05, 0x00, 0x00, 0x8B,
		0x4D, 0xD4, 0x89, 0x4D, 0xC8, 0x8B, 0x55, 0xC8, 0x0F, 0xB7, 0x02, 0x3D, 0x4D, 0x5A, 0x00,
		0x00, 0x74, 0x0A, 0xE9, 0x59, 0x05, 0x00, 0x00, 0xE9, 0x54, 0x05, 0x00, 0x00, 0x8B, 0x4D,
		0xC8, 0x8B, 0x51, 0x3C, 0x81, 0xC2, 0xF8, 0x00, 0x00, 0x00, 0x39, 0x55, 0xC4, 0x73, 0x0A,
		0xE9, 0x3E, 0x05, 0x00, 0x00, 0xE9, 0x39, 0x05, 0x00, 0x00, 0x8B, 0x45, 0xC8, 0x8B, 0x4D,
		0xD4, 0x03, 0x48, 0x3C, 0x89, 0x4D, 0xF8, 0x8B, 0x55, 0xF8, 0x81, 0x3A, 0x50, 0x45, 0x00,
		0x00, 0x74, 0x0A, 0xE9, 0x1D, 0x05, 0x00, 0x00, 0xE9, 0x18, 0x05, 0x00, 0x00, 0x8B, 0x45,
		0xF8, 0x0F, 0xB7, 0x48, 0x16, 0x81, 0xE1, 0x00, 0x20, 0x00, 0x00, 0x75, 0x0A, 0xE9, 0x04,
		0x05, 0x00, 0x00, 0xE9, 0xFF, 0x04, 0x00, 0x00, 0x8B, 0x55, 0xF8, 0x0F, 0xB7, 0x42, 0x16,
		0x83, 0xE0, 0x02, 0x75, 0x0A, 0xE9, 0xEE, 0x04, 0x00, 0x00, 0xE9, 0xE9, 0x04, 0x00, 0x00,
		0x8B, 0x4D, 0xF8, 0x0F, 0xB7, 0x51, 0x14, 0x81, 0xFA, 0xE0, 0x00, 0x00, 0x00, 0x74, 0x0A,
		0xE9, 0xD5, 0x04, 0x00, 0x00, 0xE9, 0xD0, 0x04, 0x00, 0x00, 0x8B, 0x45, 0xF8, 0x05, 0xF8,
		0x00, 0x00, 0x00, 0x89, 0x45, 0xF0, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09,
		0x8B, 0x4D, 0xFC, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0xFC, 0x8B, 0x55, 0xF8, 0x0F, 0xB7, 0x42,
		0x06, 0x39, 0x45, 0xFC, 0x7D, 0x27, 0x6B, 0x4D, 0xFC, 0x28, 0x6B, 0x55, 0xFC, 0x28, 0x8B,
		0x45, 0xF0, 0x8B, 0x4C, 0x08, 0x14, 0x8B, 0x45, 0xF0, 0x03, 0x4C, 0x10, 0x10, 0x3B, 0x4D,
		0xC4, 0x76, 0x0A, 0xE9, 0x87, 0x04, 0x00, 0x00, 0xE9, 0x82, 0x04, 0x00, 0x00, 0xEB, 0xC4,
		0x8B, 0x4D, 0xF8, 0x8B, 0x51, 0x38, 0x89, 0x55, 0xE8, 0x8B, 0x45, 0xF8, 0x8B, 0x48, 0x54,
		0x8B, 0x55, 0xE8, 0x8D, 0x44, 0x11, 0xFF, 0x33, 0xD2, 0xF7, 0x75, 0xE8, 0x0F, 0xAF, 0x45,
		0xE8, 0x89, 0x45, 0xE0, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45,
		0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x0F, 0xB7, 0x51, 0x06, 0x39,
		0x55, 0xFC, 0x7D, 0x69, 0x6B, 0x45, 0xFC, 0x28, 0x8B, 0x4D, 0xF0, 0x8B, 0x54, 0x01, 0x08,
		0x89, 0x55, 0xB4, 0x6B, 0x45, 0xFC, 0x28, 0x8B, 0x4D, 0xF0, 0x8B, 0x54, 0x01, 0x10, 0x89,
		0x55, 0xB8, 0x8B, 0x45, 0xB8, 0x3B, 0x45, 0xB4, 0x7E, 0x08, 0x8B, 0x4D, 0xB8, 0x89, 0x4D,
		0xB0, 0xEB, 0x06, 0x8B, 0x55, 0xB4, 0x89, 0x55, 0xB0, 0x8B, 0x45, 0xB0, 0x89, 0x45, 0x94,
		0x6B, 0x4D, 0xFC, 0x28, 0x8B, 0x55, 0xF0, 0x8B, 0x44, 0x0A, 0x0C, 0x03, 0x45, 0x94, 0x8B,
		0x4D, 0xE8, 0x8D, 0x44, 0x08, 0xFF, 0x33, 0xD2, 0xF7, 0x75, 0xE8, 0x0F, 0xAF, 0x45, 0xE8,
		0x89, 0x45, 0xAC, 0x8B, 0x55, 0xE0, 0x3B, 0x55, 0xAC, 0x7D, 0x06, 0x8B, 0x45, 0xAC, 0x89,
		0x45, 0xE0, 0xEB, 0x82, 0x83, 0x7D, 0xE0, 0x00, 0x75, 0x0A, 0xE9, 0xCC, 0x03, 0x00, 0x00,
		0xE9, 0xC7, 0x03, 0x00, 0x00, 0x8B, 0x4D, 0xE0, 0x89, 0x4D, 0x90, 0x6A, 0x40, 0x68, 0x00,
		0x10, 0x00, 0x00, 0x8D, 0x55, 0x90, 0x52, 0x6A, 0x00, 0x8D, 0x45, 0xF4, 0x50, 0x6A, 0xFF,
		0xFF, 0x55, 0x8C, 0x83, 0x7D, 0xF4, 0x00, 0x0F, 0x84, 0xA1, 0x03, 0x00, 0x00, 0x8B, 0x4D,
		0xF8, 0x8B, 0x51, 0x54, 0x89, 0x55, 0x88, 0x8B, 0x45, 0xF8, 0x0F, 0xB7, 0x48, 0x06, 0x6B,
		0xD1, 0x28, 0x89, 0x55, 0x84, 0x8B, 0x45, 0x88, 0x03, 0x45, 0x84, 0x89, 0x45, 0x80, 0xC7,
		0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xFC, 0x83, 0xC1, 0x01, 0x89,
		0x4D, 0xFC, 0x8B, 0x55, 0xFC, 0x3B, 0x55, 0x80, 0x7D, 0x12, 0x8B, 0x45, 0xF4, 0x03, 0x45,
		0xFC, 0x8B, 0x4D, 0xD4, 0x03, 0x4D, 0xFC, 0x8A, 0x11, 0x88, 0x10, 0xEB, 0xDD, 0xC7, 0x45,
		0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45,
		0xFC, 0x8B, 0x4D, 0xF8, 0x0F, 0xB7, 0x51, 0x06, 0x39, 0x55, 0xFC, 0x7D, 0x7A, 0x6B, 0x45,
		0xFC, 0x28, 0x8B, 0x4D, 0xF0, 0x83, 0x7C, 0x01, 0x0C, 0x00, 0x74, 0x0E, 0x6B, 0x55, 0xFC,
		0x28, 0x8B, 0x45, 0xF0, 0x83, 0x7C, 0x10, 0x10, 0x00, 0x75, 0x02, 0xEB, 0xCD, 0x6B, 0x4D,
		0xFC, 0x28, 0x8B, 0x55, 0xF0, 0x8B, 0x45, 0xF4, 0x03, 0x44, 0x0A, 0x0C, 0x89, 0x85, 0x7C,
		0xFF, 0xFF, 0xFF, 0xC7, 0x45, 0xDC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xDC,
		0x83, 0xC1, 0x01, 0x89, 0x4D, 0xDC, 0x6B, 0x55, 0xFC, 0x28, 0x8B, 0x45, 0xF0, 0x8B, 0x4D,
		0xDC, 0x3B, 0x4C, 0x10, 0x10, 0x73, 0x21, 0x6B, 0x55, 0xFC, 0x28, 0x8B, 0x45, 0xF0, 0x8B,
		0x4D, 0xD4, 0x03, 0x4C, 0x10, 0x14, 0x8B, 0x95, 0x7C, 0xFF, 0xFF, 0xFF, 0x03, 0x55, 0xDC,
		0x8B, 0x45, 0xDC, 0x8A, 0x0C, 0x01, 0x88, 0x0A, 0xEB, 0xC6, 0xE9, 0x71, 0xFF, 0xFF, 0xFF,
		0xBA, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xC2, 0x05, 0x8B, 0x4D, 0xF8, 0x83, 0x7C, 0x01, 0x78,
		0x00, 0x0F, 0x86, 0xED, 0x00, 0x00, 0x00, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xC2, 0x05,
		0x8B, 0x4D, 0xF8, 0x83, 0x7C, 0x01, 0x7C, 0x00, 0x0F, 0x86, 0xD7, 0x00, 0x00, 0x00, 0x8B,
		0x55, 0xF8, 0x8B, 0x45, 0xF4, 0x2B, 0x42, 0x34, 0x89, 0x85, 0x74, 0xFF, 0xFF, 0xFF, 0xB9,
		0x08, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x05, 0x8B, 0x45, 0xF8, 0x8B, 0x4D, 0xF4, 0x03, 0x4C,
		0x10, 0x78, 0x89, 0x4D, 0xEC, 0x8B, 0x55, 0xEC, 0x8B, 0x02, 0x8B, 0x4D, 0xEC, 0x03, 0x41,
		0x04, 0x0F, 0x84, 0xA2, 0x00, 0x00, 0x00, 0x8B, 0x55, 0xEC, 0x83, 0xC2, 0x08, 0x89, 0x55,
		0xC0, 0x8B, 0x45, 0xEC, 0x8B, 0x48, 0x04, 0x83, 0xE9, 0x08, 0xD1, 0xE9, 0x89, 0x8D, 0x78,
		0xFF, 0xFF, 0xFF, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x55, 0xFC,
		0x83, 0xC2, 0x01, 0x89, 0x55, 0xFC, 0x8B, 0x45, 0xFC, 0x3B, 0x85, 0x78, 0xFF, 0xFF, 0xFF,
		0x7D, 0x5A, 0x8B, 0x4D, 0xFC, 0x8B, 0x55, 0xC0, 0x0F, 0xB7, 0x04, 0x4A, 0x25, 0x00, 0xF0,
		0x00, 0x00, 0x3D, 0x00, 0x30, 0x00, 0x00, 0x74, 0x16, 0x8B, 0x4D, 0xFC, 0x8B, 0x55, 0xC0,
		0x0F, 0xB7, 0x04, 0x4A, 0x25, 0x00, 0xF0, 0x00, 0x00, 0x3D, 0x00, 0xA0, 0x00, 0x00, 0x75,
		0x2C, 0x8B, 0x4D, 0xEC, 0x8B, 0x55, 0xF4, 0x03, 0x11, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xC0,
		0x0F, 0xB7, 0x04, 0x41, 0x25, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xD0, 0x89, 0x55, 0xA8, 0x8B,
		0x4D, 0xA8, 0x8B, 0x11, 0x03, 0x95, 0x74, 0xFF, 0xFF, 0xFF, 0x8B, 0x45, 0xA8, 0x89, 0x10,
		0xEB, 0x92, 0x8B, 0x4D, 0xEC, 0x8B, 0x55, 0xEC, 0x03, 0x51, 0x04, 0x89, 0x55, 0xEC, 0xE9,
		0x4D, 0xFF, 0xFF, 0xFF, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xC1, 0xE0, 0x00, 0x8B, 0x4D, 0xF8,
		0x8B, 0x54, 0x01, 0x78, 0x89, 0x55, 0xA4, 0x83, 0x7D, 0xA4, 0x00, 0x75, 0x0A, 0xE9, 0x9E,
		0x01, 0x00, 0x00, 0xE9, 0x99, 0x01, 0x00, 0x00, 0x8B, 0x45, 0xF4, 0x03, 0x45, 0xA4, 0x89,
		0x45, 0xE4, 0xC7, 0x45, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xE4, 0x83, 0x39, 0x00,
		0x0F, 0x84, 0x5D, 0x01, 0x00, 0x00, 0x8B, 0x55, 0xE4, 0x8B, 0x45, 0xF4, 0x03, 0x42, 0x10,
		0x89, 0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x8B, 0x4D, 0xE4, 0x8B, 0x55, 0xF4, 0x03, 0x11, 0x89,
		0x55, 0xD8, 0x8B, 0x45, 0xE4, 0x8B, 0x4D, 0xF4, 0x03, 0x48, 0x0C, 0x89, 0x8D, 0x70, 0xFF,
		0xFF, 0xFF, 0xC7, 0x45, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x95, 0x70, 0xFF, 0xFF, 0xFF,
		0x52, 0x8D, 0x85, 0x58, 0xFF, 0xFF, 0xFF, 0x50, 0xFF, 0x55, 0xA0, 0x6A, 0x01, 0x8D, 0x8D,
		0x58, 0xFF, 0xFF, 0xFF, 0x51, 0x8D, 0x95, 0x50, 0xFF, 0xFF, 0xFF, 0x52, 0xFF, 0x95, 0x6C,
		0xFF, 0xFF, 0xFF, 0x8D, 0x45, 0xD0, 0x50, 0x8D, 0x8D, 0x50, 0xFF, 0xFF, 0xFF, 0x51, 0x6A,
		0x00, 0x6A, 0x00, 0xFF, 0x95, 0x68, 0xFF, 0xFF, 0xFF, 0x8D, 0x95, 0x50, 0xFF, 0xFF, 0xFF,
		0x52, 0xFF, 0x95, 0x64, 0xFF, 0xFF, 0xFF, 0x83, 0x7D, 0xD0, 0x00, 0x75, 0x0A, 0xE9, 0xF9,
		0x00, 0x00, 0x00, 0xE9, 0xF4, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00,
		0xEB, 0x09, 0x8B, 0x45, 0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xFC, 0x8B, 0x4D, 0xFC, 0x8B,
		0x55, 0xD8, 0x83, 0x3C, 0x8A, 0x00, 0x75, 0x05, 0xE9, 0xA3, 0x00, 0x00, 0x00, 0xC7, 0x45,
		0xCC, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xD8, 0x8B, 0x14, 0x81, 0x81,
		0xE2, 0x00, 0x00, 0x00, 0x80, 0x74, 0x2F, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xD8, 0x8B, 0x14,
		0x81, 0x81, 0xE2, 0xFF, 0xFF, 0x00, 0x00, 0x74, 0x1C, 0x8D, 0x45, 0xCC, 0x50, 0x8B, 0x4D,
		0xFC, 0x8B, 0x55, 0xD8, 0x8B, 0x04, 0x8A, 0x25, 0xFF, 0xFF, 0x00, 0x00, 0x50, 0x6A, 0x00,
		0x8B, 0x4D, 0xD0, 0x51, 0xFF, 0x55, 0x9C, 0xEB, 0x3C, 0x8B, 0x55, 0xFC, 0x8B, 0x45, 0xD8,
		0x8B, 0x4D, 0xF4, 0x03, 0x0C, 0x90, 0x89, 0x4D, 0xBC, 0x8B, 0x55, 0xBC, 0x83, 0xC2, 0x02,
		0x74, 0x25, 0x8B, 0x45, 0xBC, 0x83, 0xC0, 0x02, 0x50, 0x8D, 0x8D, 0x58, 0xFF, 0xFF, 0xFF,
		0x51, 0xFF, 0x55, 0xA0, 0x8D, 0x55, 0xCC, 0x52, 0x6A, 0x00, 0x8D, 0x85, 0x58, 0xFF, 0xFF,
		0xFF, 0x50, 0x8B, 0x4D, 0xD0, 0x51, 0xFF, 0x55, 0x9C, 0x83, 0x7D, 0xCC, 0x00, 0x74, 0x11,
		0x8B, 0x55, 0xFC, 0x8B, 0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x8B, 0x4D, 0xCC, 0x89, 0x0C, 0x90,
		0xEB, 0x04, 0xEB, 0x35, 0xEB, 0x33, 0xE9, 0x43, 0xFF, 0xFF, 0xFF, 0x8B, 0x55, 0xE4, 0x83,
		0xC2, 0x14, 0x89, 0x55, 0xE4, 0xE9, 0x97, 0xFE, 0xFF, 0xFF, 0x8B, 0x45, 0xF8, 0x8B, 0x4D,
		0xF4, 0x89, 0x48, 0x34, 0x8B, 0x55, 0xF8, 0x8B, 0x42, 0x28, 0x03, 0x45, 0xF4, 0x89, 0x45,
		0x98, 0x8B, 0x4D, 0xF4, 0x51, 0x6A, 0x01, 0x6A, 0x00, 0xFF, 0x55, 0x98, 0x8B, 0x45, 0xF4,
		0x8B, 0xE5, 0x5D, 0xC2, 0x04, 0x00, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x24, 0x8B, 0x45, 0x08,
		0x89, 0x45, 0xF4, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x00, 0x8B, 0x45, 0xF4, 0xC6,
		0x04, 0x10, 0x7B, 0xB9, 0x01, 0x00, 0x00, 0x00, 0xC1, 0xE1, 0x00, 0x8B, 0x55, 0xF4, 0xC6,
		0x04, 0x0A, 0x20, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xF8,
		0x83, 0xC0, 0x01, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8, 0x3B, 0x4D, 0x10, 0x73, 0x5C, 0x8B,
		0x45, 0xF8, 0x83, 0xC0, 0x01, 0x99, 0xB9, 0x0F, 0x00, 0x00, 0x00, 0xF7, 0xF9, 0x85, 0xD2,
		0x75, 0x25, 0x8B, 0x55, 0x0C, 0x03, 0x55, 0xF8, 0x0F, 0xB6, 0x02, 0x50, 0x68, 0x58, 0x31,
		0xB0, 0x00, 0x6B, 0x4D, 0xF8, 0x06, 0x8B, 0x55, 0xF4, 0x8D, 0x44, 0x0A, 0x02, 0x50, 0xE8,
		0x4A, 0xF9, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0xEB, 0x23, 0x8B, 0x4D, 0x0C, 0x03, 0x4D, 0xF8,
		0x0F, 0xB6, 0x11, 0x52, 0x68, 0x64, 0x31, 0xB0, 0x00, 0x6B, 0x45, 0xF8, 0x06, 0x8B, 0x4D,
		0xF4, 0x8D, 0x54, 0x01, 0x02, 0x52, 0xE8, 0x25, 0xF9, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0xEB,
		0x93, 0x8B, 0x45, 0xF4, 0x89, 0x45, 0xF0, 0x8B, 0x4D, 0xF0, 0x83, 0xC1, 0x01, 0x89, 0x4D,
		0xE8, 0x8B, 0x55, 0xF0, 0x8A, 0x02, 0x88, 0x45, 0xFF, 0x83, 0x45, 0xF0, 0x01, 0x80, 0x7D,
		0xFF, 0x00, 0x75, 0xEE, 0x8B, 0x4D, 0xF0, 0x2B, 0x4D, 0xE8, 0x89, 0x4D, 0xE4, 0x8B, 0x55,
		0xF4, 0x03, 0x55, 0xE4, 0xC6, 0x42, 0xFF, 0x7D, 0x8B, 0x45, 0xF4, 0x89, 0x45, 0xEC, 0x8B,
		0x4D, 0xEC, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0xE0, 0x8B, 0x55, 0xEC, 0x8A, 0x02, 0x88, 0x45,
		0xFE, 0x83, 0x45, 0xEC, 0x01, 0x80, 0x7D, 0xFE, 0x00, 0x75, 0xEE, 0x8B, 0x4D, 0xEC, 0x2B,
		0x4D, 0xE0, 0x89, 0x4D, 0xDC, 0x8B, 0x55, 0xF4, 0x03, 0x55, 0xDC, 0xC6, 0x42, 0xFE, 0x20,
		0xB0, 0x01, 0x8B, 0xE5, 0x5D, 0xC3 };




	static unsigned char MemLoadShellcode_x64[] = {
		0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x81, 0xEC, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x84,
		0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x89, 0x84, 0x24, 0x98, 0x00, 0x00,
		0x00, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x8B, 0x40, 0x08, 0x48, 0x89, 0x84,
		0x24, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B,
		0x40, 0x10, 0x48, 0x89, 0x84, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x80,
		0x01, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x18, 0x48, 0x89, 0x84, 0x24, 0x08, 0x01, 0x00, 0x00,
		0x48, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x20, 0x48, 0x89, 0x84,
		0x24, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B,
		0x40, 0x28, 0x48, 0x89, 0x84, 0x24, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x80,
		0x01, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x30, 0x48, 0x89, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00,
		0x48, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x40, 0x38, 0x48, 0x89, 0x84,
		0x24, 0x38, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x84, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x48, 0xC7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x4C,
		0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x48, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24,
		0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xBC, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x40, 0x0F,
		0x86, 0x59, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89,
		0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x0F,
		0xB7, 0x00, 0x3D, 0x4D, 0x5A, 0x00, 0x00, 0x74, 0x0A, 0xE9, 0x32, 0x08, 0x00, 0x00, 0xE9,
		0x2D, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40,
		0x3C, 0x48, 0x05, 0x08, 0x01, 0x00, 0x00, 0x48, 0x39, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00,
		0x73, 0x0A, 0xE9, 0x0C, 0x08, 0x00, 0x00, 0xE9, 0x07, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x84,
		0x24, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x63, 0x40, 0x3C, 0x48, 0x8B, 0x8C, 0x24, 0x98, 0x00,
		0x00, 0x00, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8B,
		0x44, 0x24, 0x38, 0x81, 0x38, 0x50, 0x45, 0x00, 0x00, 0x74, 0x0A, 0xE9, 0xD6, 0x07, 0x00,
		0x00, 0xE9, 0xD1, 0x07, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x16,
		0x25, 0x00, 0x20, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x0A, 0xE9, 0xBA, 0x07, 0x00, 0x00, 0xE9,
		0xB5, 0x07, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x16, 0x83, 0xE0,
		0x02, 0x85, 0xC0, 0x75, 0x0A, 0xE9, 0xA0, 0x07, 0x00, 0x00, 0xE9, 0x9B, 0x07, 0x00, 0x00,
		0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x14, 0x48, 0x3D, 0xF0, 0x00, 0x00, 0x00,
		0x74, 0x0A, 0xE9, 0x85, 0x07, 0x00, 0x00, 0xE9, 0x80, 0x07, 0x00, 0x00, 0x48, 0x8B, 0x44,
		0x24, 0x38, 0x48, 0x05, 0x08, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x50, 0xC7, 0x44,
		0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF, 0xC0, 0x89,
		0x44, 0x24, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x06, 0x39, 0x44, 0x24,
		0x30, 0x7D, 0x39, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0, 0x28, 0x48, 0x63, 0x4C,
		0x24, 0x30, 0x48, 0x6B, 0xC9, 0x28, 0x48, 0x8B, 0x54, 0x24, 0x50, 0x8B, 0x44, 0x02, 0x14,
		0x48, 0x8B, 0x54, 0x24, 0x50, 0x03, 0x44, 0x0A, 0x10, 0x3B, 0x84, 0x24, 0xC0, 0x00, 0x00,
		0x00, 0x76, 0x0A, 0xE9, 0x1B, 0x07, 0x00, 0x00, 0xE9, 0x16, 0x07, 0x00, 0x00, 0xEB, 0xAE,
		0x48, 0x8B, 0x44, 0x24, 0x38, 0x8B, 0x40, 0x38, 0x89, 0x44, 0x24, 0x48, 0x48, 0x8B, 0x44,
		0x24, 0x38, 0x8B, 0x40, 0x54, 0x8B, 0x4C, 0x24, 0x48, 0x8D, 0x44, 0x08, 0xFF, 0x33, 0xD2,
		0xF7, 0x74, 0x24, 0x48, 0x0F, 0xAF, 0x44, 0x24, 0x48, 0x89, 0x44, 0x24, 0x4C, 0xC7, 0x44,
		0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF, 0xC0, 0x89,
		0x44, 0x24, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x06, 0x39, 0x44, 0x24,
		0x30, 0x0F, 0x8D, 0x9A, 0x00, 0x00, 0x00, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0,
		0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x8B, 0x44, 0x01, 0x08, 0x89, 0x44, 0x24, 0x6C, 0x48,
		0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x8B, 0x44,
		0x01, 0x10, 0x89, 0x44, 0x24, 0x68, 0x8B, 0x44, 0x24, 0x6C, 0x39, 0x44, 0x24, 0x68, 0x7E,
		0x0A, 0x8B, 0x44, 0x24, 0x68, 0x89, 0x44, 0x24, 0x70, 0xEB, 0x08, 0x8B, 0x44, 0x24, 0x6C,
		0x89, 0x44, 0x24, 0x70, 0x8B, 0x44, 0x24, 0x70, 0x89, 0x84, 0x24, 0xA0, 0x00, 0x00, 0x00,
		0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x8B,
		0x44, 0x01, 0x0C, 0x03, 0x84, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x8B, 0x4C, 0x24, 0x48, 0x8D,
		0x44, 0x08, 0xFF, 0x33, 0xD2, 0xF7, 0x74, 0x24, 0x48, 0x0F, 0xAF, 0x44, 0x24, 0x48, 0x89,
		0x44, 0x24, 0x74, 0x8B, 0x44, 0x24, 0x74, 0x39, 0x44, 0x24, 0x4C, 0x7D, 0x08, 0x8B, 0x44,
		0x24, 0x74, 0x89, 0x44, 0x24, 0x4C, 0xE9, 0x49, 0xFF, 0xFF, 0xFF, 0x83, 0x7C, 0x24, 0x4C,
		0x00, 0x75, 0x0A, 0xE9, 0x1C, 0x06, 0x00, 0x00, 0xE9, 0x17, 0x06, 0x00, 0x00, 0x48, 0x63,
		0x44, 0x24, 0x4C, 0x48, 0x89, 0x84, 0x24, 0x00, 0x01, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28,
		0x40, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x10, 0x00, 0x00, 0x4C, 0x8D, 0x8C,
		0x24, 0x00, 0x01, 0x00, 0x00, 0x45, 0x33, 0xC0, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x48, 0xC7,
		0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x94, 0x24, 0x08, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7C,
		0x24, 0x40, 0x00, 0x0F, 0x84, 0xD0, 0x05, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x8B,
		0x40, 0x54, 0x89, 0x84, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F,
		0xB7, 0x40, 0x06, 0x48, 0x6B, 0xC0, 0x28, 0x89, 0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x8B,
		0x84, 0x24, 0xA4, 0x00, 0x00, 0x00, 0x8B, 0x8C, 0x24, 0xA8, 0x00, 0x00, 0x00, 0x03, 0xC8,
		0x8B, 0xC1, 0x89, 0x84, 0x24, 0xAC, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00,
		0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF, 0xC0, 0x89, 0x44, 0x24, 0x30, 0x8B,
		0x84, 0x24, 0xAC, 0x00, 0x00, 0x00, 0x39, 0x44, 0x24, 0x30, 0x7D, 0x21, 0x48, 0x63, 0x44,
		0x24, 0x30, 0x48, 0x63, 0x4C, 0x24, 0x30, 0x48, 0x8B, 0x54, 0x24, 0x40, 0x4C, 0x8B, 0x84,
		0x24, 0x98, 0x00, 0x00, 0x00, 0x41, 0x0F, 0xB6, 0x04, 0x00, 0x88, 0x04, 0x0A, 0xEB, 0xC8,
		0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF,
		0xC0, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x0F, 0xB7, 0x40, 0x06, 0x39,
		0x44, 0x24, 0x30, 0x0F, 0x8D, 0xC7, 0x00, 0x00, 0x00, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48,
		0x6B, 0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x83, 0x7C, 0x01, 0x0C, 0x00, 0x74, 0x15,
		0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x83,
		0x7C, 0x01, 0x10, 0x00, 0x75, 0x02, 0xEB, 0xB7, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B,
		0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x8B, 0x44, 0x01, 0x0C, 0x48, 0x8B, 0x4C, 0x24,
		0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00,
		0x48, 0xC7, 0x44, 0x24, 0x78, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0D, 0x48, 0x8B, 0x44, 0x24,
		0x78, 0x48, 0xFF, 0xC0, 0x48, 0x89, 0x44, 0x24, 0x78, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48,
		0x6B, 0xC0, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x8B, 0x44, 0x01, 0x10, 0x48, 0x39, 0x44,
		0x24, 0x78, 0x73, 0x40, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x6B, 0xC0, 0x28, 0x48, 0x8B,
		0x4C, 0x24, 0x50, 0x8B, 0x44, 0x01, 0x14, 0x48, 0x8B, 0x8C, 0x24, 0x98, 0x00, 0x00, 0x00,
		0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x8B, 0x4C, 0x24, 0x78, 0x48, 0x8B, 0x94, 0x24,
		0x10, 0x01, 0x00, 0x00, 0x48, 0x03, 0xD1, 0x48, 0x8B, 0xCA, 0x48, 0x8B, 0x54, 0x24, 0x78,
		0x0F, 0xB6, 0x04, 0x10, 0x88, 0x01, 0xEB, 0x9A, 0xE9, 0x1C, 0xFF, 0xFF, 0xFF, 0xB8, 0x08,
		0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x05, 0x48, 0x8B, 0x4C, 0x24, 0x38, 0x83, 0xBC, 0x01,
		0x88, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x86, 0x7E, 0x01, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00,
		0x00, 0x48, 0x6B, 0xC0, 0x05, 0x48, 0x8B, 0x4C, 0x24, 0x38, 0x83, 0xBC, 0x01, 0x8C, 0x00,
		0x00, 0x00, 0x00, 0x0F, 0x86, 0x62, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x48,
		0x8B, 0x40, 0x30, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x2B, 0xC8, 0x48, 0x8B, 0xC1, 0x48,
		0x89, 0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0,
		0x05, 0x48, 0x8B, 0x4C, 0x24, 0x38, 0x8B, 0x84, 0x01, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8B,
		0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48,
		0x8B, 0x44, 0x24, 0x58, 0x8B, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x58, 0x03, 0x41, 0x04, 0x85,
		0xC0, 0x0F, 0x84, 0x0A, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x58, 0x48, 0x83, 0xC0,
		0x08, 0x48, 0x89, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x58, 0x8B,
		0x40, 0x04, 0x48, 0x83, 0xE8, 0x08, 0x33, 0xD2, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x48, 0xF7,
		0xF1, 0x89, 0x84, 0x24, 0xB0, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00,
		0x00, 0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF, 0xC0, 0x89, 0x44, 0x24, 0x30, 0x8B, 0x84,
		0x24, 0xB0, 0x00, 0x00, 0x00, 0x39, 0x44, 0x24, 0x30, 0x0F, 0x8D, 0x9A, 0x00, 0x00, 0x00,
		0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8C, 0x24, 0xC8, 0x00, 0x00, 0x00, 0x0F, 0xB7,
		0x04, 0x41, 0x25, 0x00, 0xF0, 0x00, 0x00, 0x48, 0x98, 0x48, 0x3D, 0x00, 0x30, 0x00, 0x00,
		0x74, 0x20, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8C, 0x24, 0xC8, 0x00, 0x00, 0x00,
		0x0F, 0xB7, 0x04, 0x41, 0x25, 0x00, 0xF0, 0x00, 0x00, 0x48, 0x98, 0x48, 0x3D, 0x00, 0xA0,
		0x00, 0x00, 0x75, 0x55, 0x48, 0x8B, 0x44, 0x24, 0x58, 0x8B, 0x00, 0x48, 0x8B, 0x4C, 0x24,
		0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x63, 0x4C, 0x24, 0x30, 0x48, 0x8B, 0x94,
		0x24, 0xC8, 0x00, 0x00, 0x00, 0x0F, 0xB7, 0x0C, 0x4A, 0x81, 0xE1, 0xFF, 0x0F, 0x00, 0x00,
		0x48, 0x63, 0xC9, 0x48, 0x03, 0xC1, 0x48, 0x89, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x48,
		0x8B, 0x84, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x03, 0x84, 0x24, 0x18,
		0x01, 0x00, 0x00, 0x48, 0x8B, 0x8C, 0x24, 0xD8, 0x00, 0x00, 0x00, 0x48, 0x89, 0x01, 0xE9,
		0x4B, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x44, 0x24, 0x58, 0x8B, 0x40, 0x04, 0x48, 0x8B, 0x4C,
		0x24, 0x58, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x58, 0xE9, 0xDF,
		0xFE, 0xFF, 0xFF, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x01, 0x48, 0x8B, 0x4C,
		0x24, 0x38, 0x8B, 0x84, 0x01, 0x88, 0x00, 0x00, 0x00, 0x48, 0x89, 0x84, 0x24, 0xE0, 0x00,
		0x00, 0x00, 0x48, 0x83, 0xBC, 0x24, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0A, 0xE9, 0x9D,
		0x02, 0x00, 0x00, 0xE9, 0x98, 0x02, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0xE0, 0x00, 0x00,
		0x00, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44,
		0x24, 0x60, 0x48, 0xC7, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
		0x8B, 0x44, 0x24, 0x60, 0x83, 0x38, 0x00, 0x0F, 0x84, 0x30, 0x02, 0x00, 0x00, 0x48, 0x8B,
		0x44, 0x24, 0x60, 0x8B, 0x40, 0x10, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48,
		0x8B, 0xC1, 0x48, 0x89, 0x84, 0x24, 0x40, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x60,
		0x8B, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89,
		0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x60, 0x8B, 0x40, 0x0C, 0x48,
		0x8B, 0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x84, 0x24, 0x20,
		0x01, 0x00, 0x00, 0x48, 0xC7, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x48, 0x8B, 0x94, 0x24, 0x20, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0x48, 0x01, 0x00,
		0x00, 0xFF, 0x94, 0x24, 0xE8, 0x00, 0x00, 0x00, 0x41, 0xB0, 0x01, 0x48, 0x8D, 0x94, 0x24,
		0x48, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x8C, 0x24, 0x58, 0x01, 0x00, 0x00, 0xFF, 0x94, 0x24,
		0x28, 0x01, 0x00, 0x00, 0x4C, 0x8D, 0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x84,
		0x24, 0x58, 0x01, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0xFF, 0x94, 0x24, 0x30, 0x01, 0x00,
		0x00, 0x48, 0x8D, 0x8C, 0x24, 0x58, 0x01, 0x00, 0x00, 0xFF, 0x94, 0x24, 0x38, 0x01, 0x00,
		0x00, 0x48, 0x83, 0xBC, 0x24, 0x88, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0A, 0xE9, 0x9F, 0x01,
		0x00, 0x00, 0xE9, 0x9A, 0x01, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00,
		0xEB, 0x0A, 0x8B, 0x44, 0x24, 0x30, 0xFF, 0xC0, 0x89, 0x44, 0x24, 0x30, 0x48, 0x63, 0x44,
		0x24, 0x30, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3C, 0xC1, 0x00,
		0x75, 0x05, 0xE9, 0x24, 0x01, 0x00, 0x00, 0x48, 0xC7, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00,
		0x00, 0x00, 0x48, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x48, 0x8B, 0x04,
		0xC1, 0x48, 0x23, 0xC2, 0x48, 0x85, 0xC0, 0x74, 0x51, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48,
		0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x04, 0xC1, 0x48, 0x25, 0xFF, 0xFF,
		0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x33, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8C,
		0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x04, 0xC1, 0x48, 0x25, 0xFF, 0xFF, 0x00, 0x00,
		0x4C, 0x8D, 0x8C, 0x24, 0x90, 0x00, 0x00, 0x00, 0x44, 0x8B, 0xC0, 0x33, 0xD2, 0x48, 0x8B,
		0x8C, 0x24, 0x88, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24, 0xF0, 0x00, 0x00, 0x00, 0xEB, 0x75,
		0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x8C, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B,
		0x04, 0xC1, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89,
		0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x84, 0x24, 0xD0, 0x00, 0x00, 0x00, 0x48,
		0x83, 0xC0, 0x02, 0x48, 0x85, 0xC0, 0x74, 0x40, 0x48, 0x8B, 0x84, 0x24, 0xD0, 0x00, 0x00,
		0x00, 0x48, 0x83, 0xC0, 0x02, 0x48, 0x8B, 0xD0, 0x48, 0x8D, 0x8C, 0x24, 0x48, 0x01, 0x00,
		0x00, 0xFF, 0x94, 0x24, 0xE8, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x8C, 0x24, 0x90, 0x00, 0x00,
		0x00, 0x45, 0x33, 0xC0, 0x48, 0x8D, 0x94, 0x24, 0x48, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x8C,
		0x24, 0x88, 0x00, 0x00, 0x00, 0xFF, 0x94, 0x24, 0xF0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xBC,
		0x24, 0x90, 0x00, 0x00, 0x00, 0x00, 0x74, 0x1B, 0x48, 0x63, 0x44, 0x24, 0x30, 0x48, 0x8B,
		0x8C, 0x24, 0x40, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x94, 0x24, 0x90, 0x00, 0x00, 0x00, 0x48,
		0x89, 0x14, 0xC1, 0xEB, 0x04, 0xEB, 0x50, 0xEB, 0x4E, 0xE9, 0xB9, 0xFE, 0xFF, 0xFF, 0x48,
		0x8B, 0x44, 0x24, 0x60, 0x48, 0x83, 0xC0, 0x14, 0x48, 0x89, 0x44, 0x24, 0x60, 0xE9, 0xC2,
		0xFD, 0xFF, 0xFF, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x48, 0x8B, 0x4C, 0x24, 0x40, 0x48, 0x89,
		0x48, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x38, 0x8B, 0x40, 0x28, 0x48, 0x03, 0x44, 0x24, 0x40,
		0x48, 0x89, 0x84, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x44, 0x24, 0x40, 0xBA, 0x01,
		0x00, 0x00, 0x00, 0x33, 0xC9, 0xFF, 0x94, 0x24, 0xF8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x44,
		0x24, 0x40, 0x48, 0x81, 0xC4, 0x78, 0x01, 0x00, 0x00, 0xC3 };


}




/*


int _tmain(int argc, _TCHAR* argv[])
{
	char szFileName[] = "TraceMe.exe";

	// 打开EXE文件并获取EXE文件大小
	HANDLE hFile = CreateFile(szFileName, GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
		FILE_ATTRIBUTE_ARCHIVE, NULL);
	if (INVALID_HANDLE_VALUE == hFile)
	{
		ShowError("CreateFile");
		return 1;
	}
	DWORD dwFileSize = GetFileSize(hFile, NULL);
	// 申请动态内存并读取DLL到内存中
	BYTE *pData = new BYTE[dwFileSize];
	if (NULL == pData)
	{
		ShowError("new");
		return 2;
	}
	DWORD dwRet = 0;
	ReadFile(hFile, pData, dwFileSize, &dwRet, NULL);
	CloseHandle(hFile);

	// 判断有无重定位表
	if (FALSE == IsExistRelocationTable(pData))
	{
		printf("[FALSE] IsExistRelocationTable\n");
		system("pause");
		return 0;
	}
	// 将内存DLL加载到程序中
	LPVOID lpBaseAddress = MmRunExe(pData, dwFileSize);
	if (NULL == lpBaseAddress)
	{
		ShowError("MmRunExe");
		return 3;
	}

	system("pause");
	return 0;
}


-----------------------------
int _tmain(int argc, _TCHAR* argv[])
{
	//char szFileName[MAX_PATH] = "TestDll.dll";
	char szFileName[MAX_PATH] = "C:\\Users\\39708\\source\\repos\\HACKER_STAGE\\x64\\Release\\TestDll.dll";
	// 打开DLL文件并获取DLL文件大小
	HANDLE hFile = ::CreateFile(szFileName, GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
		FILE_ATTRIBUTE_ARCHIVE, NULL);
	if (INVALID_HANDLE_VALUE == hFile)
	{
		ShowError("CreateFile");
		return 1;
	}
	DWORD dwFileSize = ::GetFileSize(hFile, NULL);
	// 申请动态内存并读取DLL到内存中
	BYTE *lpData = new BYTE[dwFileSize];
	if (NULL == lpData)
	{
		ShowError("new");
		return 2;
	}
	DWORD dwRet = 0;
	::ReadFile(hFile, lpData, dwFileSize, &dwRet, NULL);

	// 将内存DLL加载到程序中
	LPVOID lpBaseAddress = MmLoadLibrary(lpData, dwFileSize);
	if (NULL == lpBaseAddress)
	{
		ShowError("MmLoadLibrary");
		return 3;
	}
	printf("DLL加载成功\n");

	// 获取DLL导出函数并调用
	typedef BOOL(*typedef_ShowMessage)(char *lpszText, char *lpszCaption);
	typedef_ShowMessage ShowMessage = (typedef_ShowMessage)MmGetProcAddress(lpBaseAddress, "ShowMessage");
	if (NULL == ShowMessage)
	{
		ShowError("MmGetProcAddress");
		return 4;
	}
	ShowMessage("I am Demon・Gan\n", "Who Are You");

	// 释放从内存加载的DLL
	BOOL bRet = MmFreeLibrary(lpBaseAddress);
	if (FALSE == bRet)
	{
		ShowError("MmFreeLirbary");
	}

	// 释放
	delete[] lpData;
	lpData = NULL;
	::CloseHandle(hFile);

	system("pause");
	return 0;
}


*/


///------------------------------------------- loader2.h  ----------------------------------------------------


//#include <Windows.h>
//#include <Winternl.h>
//#ifdef _WIN64
//typedef  DWORD64 ULONG_PTR;
//#else
//typedef  DWORD32 ULONG_PTR;
//#endif
//typedef NTSTATUS(WINAPI *LdrGetProcedureAddressT)(IN PVOID DllHandle, IN PANSI_STRING ProcedureName OPTIONAL, IN ULONG ProcedureNumber OPTIONAL, OUT FARPROC *ProcedureAddress);
//typedef VOID(WINAPI *RtlFreeUnicodeStringT)(_Inout_ PUNICODE_STRING UnicodeString);
//typedef  VOID(WINAPI *RtlInitAnsiStringT)(_Out_    PANSI_STRING DestinationString, _In_opt_ PCSZ         SourceString);
//typedef NTSTATUS(WINAPI *RtlAnsiStringToUnicodeStringT)(_Inout_ PUNICODE_STRING DestinationString, _In_ PCANSI_STRING SourceString, _In_ BOOLEAN AllocateDestinationString);
//typedef NTSTATUS(WINAPI *LdrLoadDllT)(PWCHAR, PULONG, PUNICODE_STRING, PHANDLE);
//typedef BOOL(APIENTRY *ProcDllMain)(LPVOID, DWORD, LPVOID);
//typedef NTSTATUS(WINAPI *NtAllocateVirtualMemoryT)(IN HANDLE ProcessHandle, IN OUT PVOID *BaseAddress, IN ULONG ZeroBits, IN OUT PSIZE_T RegionSize, IN ULONG AllocationType, IN ULONG Protect);
//
//struct PARAMX
//{
//	PVOID lpFileData;
//	DWORD DataLength;
//	LdrGetProcedureAddressT LdrGetProcedureAddress;
//	NtAllocateVirtualMemoryT dwNtAllocateVirtualMemory;
//	LdrLoadDllT pLdrLoadDll;
//	RtlInitAnsiStringT RtlInitAnsiString;
//	RtlAnsiStringToUnicodeStringT RtlAnsiStringToUnicodeString;
//	RtlFreeUnicodeStringT RtlFreeUnicodeString;
//
//
//};
//
//ULONG_PTR WINAPI MemLoadLibrary2(PARAMX *X)//2502
//{
//
//	LPCVOID lpFileData = X->lpFileData;
//	ULONG_PTR DataLength = X->DataLength;
//
//	/****************初始化调用函数********************/
//	LdrGetProcedureAddressT LdrGetProcedureAddress = (X->LdrGetProcedureAddress);
//
//	NtAllocateVirtualMemoryT pNtAllocateVirtualMemory = (X->dwNtAllocateVirtualMemory);
//	LdrLoadDllT pLdrLoadDll = (X->pLdrLoadDll);
//	RtlInitAnsiStringT RtlInitAnsiString = X->RtlInitAnsiString;
//	RtlAnsiStringToUnicodeStringT RtlAnsiStringToUnicodeString = X->RtlAnsiStringToUnicodeString;
//	RtlFreeUnicodeStringT RtlFreeUnicodeString = X->RtlFreeUnicodeString;
//
//	ProcDllMain pDllMain = NULL;
//	void *pMemoryAddress = NULL;
//
//
//
//	ANSI_STRING ansiStr;
//	UNICODE_STRING UnicodeString;
//	PIMAGE_DOS_HEADER pDosHeader;
//	PIMAGE_NT_HEADERS pNTHeader;
//	PIMAGE_SECTION_HEADER pSectionHeader;
//	int ImageSize = 0;
//
//	int nAlign = 0;
//	int i = 0;
//
//
//	//检查数据有效性，并初始化
//	/*********************CheckDataValide**************************************/
//	//	PIMAGE_DOS_HEADER pDosHeader;
//	//检查长度
//	if (DataLength > sizeof(IMAGE_DOS_HEADER))
//	{
//		pDosHeader = (PIMAGE_DOS_HEADER)lpFileData; // DOS头
//		//检查dos头的标记
//		if (pDosHeader->e_magic != IMAGE_DOS_SIGNATURE) goto CODEEXIT; //0×5A4D : MZ
//
//		//检查长度
//		if ((ULONG_PTR)DataLength < (pDosHeader->e_lfanew + sizeof(IMAGE_NT_HEADERS))) goto CODEEXIT;
//		//取得pe头
//		pNTHeader = (PIMAGE_NT_HEADERS)((ULONG_PTR)lpFileData + pDosHeader->e_lfanew); // PE头
//		//检查pe头的合法性
//		if (pNTHeader->Signature != IMAGE_NT_SIGNATURE) goto CODEEXIT; //0×00004550: PE00
//		if ((pNTHeader->FileHeader.Characteristics & IMAGE_FILE_DLL) == 0) //0×2000: File is a DLL
//			goto CODEEXIT;
//		if ((pNTHeader->FileHeader.Characteristics & IMAGE_FILE_EXECUTABLE_IMAGE) == 0) //0×0002: 指出文件可以运行
//			goto CODEEXIT;
//		if (pNTHeader->FileHeader.SizeOfOptionalHeader != sizeof(IMAGE_OPTIONAL_HEADER))
//			goto CODEEXIT;
//
//
//		//取得节表（段表）
//		pSectionHeader = (PIMAGE_SECTION_HEADER)((ULONG_PTR)pNTHeader + sizeof(IMAGE_NT_HEADERS));
//		//验证每个节表的空间
//		for (i = 0; i < pNTHeader->FileHeader.NumberOfSections; i++)
//		{
//			if ((pSectionHeader[i].PointerToRawData + pSectionHeader[i].SizeOfRawData) > (DWORD)DataLength) goto CODEEXIT;
//		}
//
//		/**********************************************************************/
//		nAlign = pNTHeader->OptionalHeader.SectionAlignment; //段对齐字节数
//
//		//ImageSize = pNTHeader->OptionalHeader.SizeOfImage;
//		//// 计算所有头的尺寸。包括dos, coff, pe头 和 段表的大小
//		ImageSize = (pNTHeader->OptionalHeader.SizeOfHeaders + nAlign - 1) / nAlign * nAlign;
//		// 计算所有节的大小
//		for (i = 0; i < pNTHeader->FileHeader.NumberOfSections; ++i)
//		{
//			//得到该节的大小
//			int CodeSize = pSectionHeader[i].Misc.VirtualSize;
//			int LoadSize = pSectionHeader[i].SizeOfRawData;
//			int MaxSize = (LoadSize > CodeSize) ? (LoadSize) : (CodeSize);
//
//			int SectionSize = (pSectionHeader[i].VirtualAddress + MaxSize + nAlign - 1) / nAlign * nAlign;
//			if (ImageSize < SectionSize)
//				ImageSize = SectionSize; //Use the Max;
//		}
//		if (ImageSize == 0) goto CODEEXIT;
//
//		// 分配虚拟内存
//		SIZE_T uSize = ImageSize;
//		pNtAllocateVirtualMemory((HANDLE)-1, &pMemoryAddress, 0, &uSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
//
//		if (pMemoryAddress != NULL)
//		{
//
//			// 计算需要复制的PE头+段表字节数
//			int HeaderSize = pNTHeader->OptionalHeader.SizeOfHeaders;
//			int SectionSize = pNTHeader->FileHeader.NumberOfSections * sizeof(IMAGE_SECTION_HEADER);
//			int MoveSize = HeaderSize + SectionSize;
//			//复制头和段信息
//			for (i = 0; i < MoveSize; i++)
//			{
//				*((PCHAR)pMemoryAddress + i) = *((PCHAR)lpFileData + i);
//			}
//			//memmove(pMemoryAddress, lpFileData, MoveSize);//为了少用一个API,直接用上面的单字节复制数据就行了
//
//			//复制每个节
//			for (i = 0; i < pNTHeader->FileHeader.NumberOfSections; ++i)
//			{
//				if (pSectionHeader[i].VirtualAddress == 0 || pSectionHeader[i].SizeOfRawData == 0)continue;
//				// 定位该节在内存中的位置
//				void *pSectionAddress = (void *)((ULONG_PTR)pMemoryAddress + pSectionHeader[i].VirtualAddress);
//				// 复制段数据到虚拟内存
//			//	memmove((void *)pSectionAddress,(void *)((ULONG_PTR)lpFileData + pSectionHeader[i].PointerToRawData),	pSectionHeader[i].SizeOfRawData);
//				//为了少用一个API,直接用上面的单字节复制数据就行了
//				for (size_t k = 0; k < pSectionHeader[i].SizeOfRawData; k++)
//				{
//					*((PCHAR)pSectionAddress + k) = *((PCHAR)lpFileData + pSectionHeader[i].PointerToRawData + k);
//				}
//			}
//			/*******************重定位信息****************************************************/
//
//			if (pNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress > 0
//				&& pNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size > 0)
//			{
//
//				ULONG_PTR Delta = (ULONG_PTR)pMemoryAddress - pNTHeader->OptionalHeader.ImageBase;
//				ULONG_PTR * pAddress;
//				//注意重定位表的位置可能和硬盘文件中的偏移地址不同，应该使用加载后的地址
//				PIMAGE_BASE_RELOCATION pLoc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pMemoryAddress
//					+ pNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
//				while ((pLoc->VirtualAddress + pLoc->SizeOfBlock) != 0) //开始扫描重定位表
//				{
//					WORD *pLocData = (WORD *)((ULONG_PTR)pLoc + sizeof(IMAGE_BASE_RELOCATION));
//					//计算本节需要修正的重定位项（地址）的数目
//					int NumberOfReloc = (pLoc->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
//					for (i = 0; i < NumberOfReloc; i++)
//					{
//						if ((ULONG_PTR)(pLocData[i] & 0xF000) == 0x00003000 || (ULONG_PTR)(pLocData[i] & 0xF000) == 0x0000A000) //这是一个需要修正的地址
//						{
//							// 举例：
//							// pLoc->VirtualAddress = 0×1000;
//							// pLocData[i] = 0×313E; 表示本节偏移地址0×13E处需要修正
//							// 因此 pAddress = 基地址 + 0×113E
//							// 里面的内容是 A1 ( 0c d4 02 10) 汇编代码是： mov eax , [1002d40c]
//							// 需要修正1002d40c这个地址
//							pAddress = (ULONG_PTR *)((ULONG_PTR)pMemoryAddress + pLoc->VirtualAddress + (pLocData[i] & 0x0FFF));
//							*pAddress += Delta;
//						}
//					}
//					//转移到下一个节进行处理
//					pLoc = (PIMAGE_BASE_RELOCATION)((ULONG_PTR)pLoc + pLoc->SizeOfBlock);
//				}
//				/***********************************************************************/
//			}
//
//			/******************* 修正引入地址表**************/
//			ULONG_PTR Offset = pNTHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
//			if (Offset == 0)
//				goto CODEEXIT; //No Import Table
//
//			PIMAGE_IMPORT_DESCRIPTOR pID = (PIMAGE_IMPORT_DESCRIPTOR)((ULONG_PTR)pMemoryAddress + Offset);
//
//			PIMAGE_IMPORT_BY_NAME pByName = NULL;
//			while (pID->Characteristics != 0)
//			{
//				PIMAGE_THUNK_DATA pRealIAT = (PIMAGE_THUNK_DATA)((ULONG_PTR)pMemoryAddress + pID->FirstThunk);
//				PIMAGE_THUNK_DATA pOriginalIAT = (PIMAGE_THUNK_DATA)((ULONG_PTR)pMemoryAddress + pID->OriginalFirstThunk);
//				//获取dll的名字
//				char* pName = (char*)((ULONG_PTR)pMemoryAddress + pID->Name);
//				HANDLE hDll = 0;
//
//				RtlInitAnsiString(&ansiStr, pName);
//
//				RtlAnsiStringToUnicodeString(&UnicodeString, &ansiStr, true);
//				pLdrLoadDll(NULL, NULL, &UnicodeString, &hDll);
//				RtlFreeUnicodeString(&UnicodeString);
//
//				if (hDll == NULL) {
//
//					goto CODEEXIT; //NOT FOUND DLL
//				}
//
//				//获取DLL中每个导出函数的地址，填入IAT
//				//每个IAT结构是 ：
//				// union { PBYTE ForwarderString;
//				// PULONG_PTR Function;
//				// ULONG_PTR Ordinal;
//				// PIMAGE_IMPORT_BY_NAME AddressOfData;
//				// } u1;
//				// 长度是一个ULONG_PTR ，正好容纳一个地址。
//				for (i = 0; ; i++)
//				{
//					if (pOriginalIAT[i].u1.Function == 0)break;
//					FARPROC lpFunction = NULL;
//					if (IMAGE_SNAP_BY_ORDINAL(pOriginalIAT[i].u1.Ordinal)) //这里的值给出的是导出序号
//					{
//						if (IMAGE_ORDINAL(pOriginalIAT[i].u1.Ordinal))
//						{
//
//							LdrGetProcedureAddress(hDll, NULL, IMAGE_ORDINAL(pOriginalIAT[i].u1.Ordinal), &lpFunction);
//						}
//					}
//					else//按照名字导入
//					{
//						//获取此IAT项所描述的函数名称
//						pByName = (PIMAGE_IMPORT_BY_NAME)((ULONG_PTR)pMemoryAddress + (ULONG_PTR)(pOriginalIAT[i].u1.AddressOfData));
//						if ((char *)pByName->Name)
//						{
//							RtlInitAnsiString(&ansiStr, (char *)pByName->Name);
//							LdrGetProcedureAddress(hDll, &ansiStr, 0, &lpFunction);
//
//						}
//
//					}
//
//					//标记***********
//
//					if (lpFunction != NULL) //找到了！
//						pRealIAT[i].u1.Function = (ULONG_PTR)lpFunction;
//					else
//						goto CODEEXIT;
//				}
//
//				//move to next
//				pID = (PIMAGE_IMPORT_DESCRIPTOR)((ULONG_PTR)pID + sizeof(IMAGE_IMPORT_DESCRIPTOR));
//			}
//
//			/***********************************************************/
//			//修正基地址
//			pNTHeader->OptionalHeader.ImageBase = (ULONG_PTR)pMemoryAddress;
//
//			//NtProtectVirtualMemory((HANDLE)-1, &pMemoryAddress, (PSIZE_T)&ImageSize, PAGE_EXECUTE_READ, &oldProtect);
//			pDllMain = (ProcDllMain)(pNTHeader->OptionalHeader.AddressOfEntryPoint + (ULONG_PTR)pMemoryAddress);
//
//			pDllMain(0, DLL_PROCESS_ATTACH, pMemoryAddress);//这里的参数1本来应该传的是(HMODULE)pMemoryAddress,但是没必要,因为无法使用资源,所以没必要,要使用资源,论坛有其他人说过如何使用
//
//		}
//	}
//
//CODEEXIT:
//
//	return (ULONG_PTR)pMemoryAddress;
//}



///-------------------------------------------MainLoad.cpp----------------------------------------------------

//
//#include <Windows.h>
//#include <stdio.h>
//#include <iostream>
//#include "loader2.h"
//#ifndef _WIN64
//#define DLLPATH L".\\MainLoad32.dll"
//#define LOADECODE L".\\LOADECODE32.code"
//#else
//#define DLLPATH L".\\MainLoad64.dll"
//#define LOADECODE L".\\LOADECODE64.code"
//#endif 
//void SaveShellCode()
//{
//
//
//	DWORD size = 0, ssss = 0;
//	WORD* Memx = (WORD*)MemLoadLibrary2;
//	while (*Memx != 0xCCCC)
//	{
//		Memx++;
//		size += 2;
//	}
//
//	printf("MemLoadLibrary2=%p codesite=%X\n", MemLoadLibrary2, size);
//	HANDLE hFile = CreateFile(LOADECODE, GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, NULL, NULL);
//	if (hFile)
//	{
//		WriteFile(hFile, MemLoadLibrary2, size, &ssss, NULL);
//		CloseHandle(hFile);
//	}
//
//}
//void Test1()
//{
//	HANDLE hFile = CreateFile(DLLPATH, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
//	if (hFile)
//	{
//
//		DWORD fileSize = GetFileSize(hFile, NULL);
//		DWORD RSize = 0;
//		VOID *pBuffer = malloc(fileSize);
//		ReadFile(hFile, pBuffer, fileSize, &RSize, NULL);
//		HMODULE NTDLL = GetModuleHandleA("ntdll");
//		PARAMX param;
//		RtlZeroMemory(&param, sizeof(PARAMX));
//		param.lpFileData = pBuffer;
//		param.DataLength = fileSize;
//		param.LdrGetProcedureAddress = (LdrGetProcedureAddressT)GetProcAddress(NTDLL, "LdrGetProcedureAddress");;
//		param.dwNtAllocateVirtualMemory = (NtAllocateVirtualMemoryT)GetProcAddress(NTDLL, "NtAllocateVirtualMemory");
//		param.pLdrLoadDll = (LdrLoadDllT)GetProcAddress(NTDLL, "LdrLoadDll");
//		param.RtlInitAnsiString = (RtlInitAnsiStringT)GetProcAddress(NTDLL, "RtlInitAnsiString");
//		param.RtlAnsiStringToUnicodeString = (RtlAnsiStringToUnicodeStringT)GetProcAddress(NTDLL, "RtlAnsiStringToUnicodeString");
//		param.RtlFreeUnicodeString = (RtlFreeUnicodeStringT)GetProcAddress(NTDLL, "RtlFreeUnicodeString");
//		PVOID pModule = (PVOID)MemLoadLibrary2(&param);
//		printf("pModule=%p \n", pModule);
//		CloseHandle(hFile);
//		free(pBuffer);
//	}
//}
//
//void Test2()
//{
//	SIZE_T dWrited = 0;
//	HANDLE hFile = CreateFile(DLLPATH, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
//	HANDLE hFile2 = CreateFile(LOADECODE, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
//	if (hFile && hFile2)
//	{
//		//获取DLL数据
//		DWORD fileSize = GetFileSize(hFile, NULL);
//		DWORD RSize = 0;
//		VOID *pBuffer = malloc(fileSize);
//		ReadFile(hFile, pBuffer, fileSize, &RSize, NULL);
//
//		//获取shellcode
//		DWORD fileSize2 = GetFileSize(hFile2, NULL);
//
//		VOID *pBuffer2 = malloc(fileSize2);
//		ReadFile(hFile2, pBuffer2, fileSize2, &RSize, NULL);
//
//		HMODULE NTDLL = GetModuleHandleA("ntdll");
//		PARAMX param;
//		RtlZeroMemory(&param, sizeof(PARAMX));
//		param.lpFileData = pBuffer;
//		param.DataLength = fileSize;
//		param.LdrGetProcedureAddress = (LdrGetProcedureAddressT)GetProcAddress(NTDLL, "LdrGetProcedureAddress");;
//		param.dwNtAllocateVirtualMemory = (NtAllocateVirtualMemoryT)GetProcAddress(NTDLL, "NtAllocateVirtualMemory");
//		param.pLdrLoadDll = (LdrLoadDllT)GetProcAddress(NTDLL, "LdrLoadDll");
//		param.RtlInitAnsiString = (RtlInitAnsiStringT)GetProcAddress(NTDLL, "RtlInitAnsiString");
//		param.RtlAnsiStringToUnicodeString = (RtlAnsiStringToUnicodeStringT)GetProcAddress(NTDLL, "RtlAnsiStringToUnicodeString");
//		param.RtlFreeUnicodeString = (RtlFreeUnicodeStringT)GetProcAddress(NTDLL, "RtlFreeUnicodeString");
//
//		//开始远程注入
//		HANDLE hProcess = GetCurrentProcess();//目标进程句柄
//		//申请内存,把shellcode和DLL数据,和参数复制到目标进程
//		PBYTE  pAddress = (PBYTE)VirtualAllocEx(hProcess, 0, fileSize + fileSize2 + sizeof(PARAMX) + 0x100, MEM_COMMIT, PAGE_EXECUTE_READWRITE);//安全起见,大小多加0x100
//		param.lpFileData = pAddress;//修成下DLL数据的地址
//		WriteProcessMemory(hProcess, pAddress, pBuffer, fileSize, &dWrited);//DLL数据写入到目标
//		WriteProcessMemory(hProcess, pAddress + fileSize, pBuffer2, fileSize2, &dWrited);//shellcode写入到目标
//		WriteProcessMemory(hProcess, pAddress + fileSize + fileSize2, &param, sizeof(PARAMX), &dWrited);//参数写入到目标
//
//		//启动注入线程=pAddress+ fileSize,参数=pAddress+ fileSize+ fileSize2;
//		HANDLE hThread = CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)(pAddress + fileSize), pAddress + fileSize + fileSize2, 0, 0);
//		if (hThread)
//		{
//			DWORD dExecCode = 0;
//			printf("等待注入线程执行完毕....\n");
//			WaitForSingleObject(hThread, -1);
//			GetExitCodeThread(hThread, &dExecCode);
//#ifdef _WIN64
//
//			printf("注入完成....%p\n", dExecCode + (((DWORD64)pAddress >> 32) << 32));//如果是64位,基于内存申请的地址逐步累加,可以大概算出注入的模块基址
//#else
//			printf("注入完成....%p \n", dExecCode);//如果是32位注入,这里的dExecCode=注入的模块基址
//#endif 
//
//			//释放掉申请的内存
//			VirtualFreeEx(hProcess, pAddress, 0, MEM_FREE);
//			CloseHandle(hThread);
//			CloseHandle(hProcess);
//		}
//
//		CloseHandle(hFile);
//		free(pBuffer);
//		CloseHandle(hFile2);
//		free(pBuffer2);
//
//	}
//}
//#ifdef _EXE
//int main()
//{
//	std::cout << "Hello World!\n";
//	SaveShellCode();
//	Test1();
//	Test2();
//	getchar();
//}
//#else
//DWORD WINAPI TestThread(PVOID lpram)
//{
//	wchar_t msg[100] = { 0 };
//	wsprintf(msg, L"模块地址=%p", lpram);
//	MessageBox(0, msg, 0, 0);
//	return 0;
//}
//BOOL APIENTRY DllMain(HMODULE hModule,
//	DWORD  ul_reason_for_call,
//	LPVOID lpReserved
//)
//{
//
//	switch (ul_reason_for_call)
//	{
//	case DLL_PROCESS_ATTACH:
//	{
//		CreateThread(0, 0, TestThread, lpReserved, 0, 0);
//		break;
//	}
//	case DLL_THREAD_ATTACH:
//	case DLL_THREAD_DETACH:
//	case DLL_PROCESS_DETACH:
//		break;
//	}
//
//	return TRUE;
//}
//#endif // _CONSOLE
